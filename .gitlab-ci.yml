stages:
  - test
  - pack
  - cluster
  - deploy
  - cluster.prod
  - deploy.prod

# job reference
.deploy-gcp: &deploy-gcp
  tags:
    - linux
    - docker
  image:
    willischou/gcp-gomplate-kubectl:0.3
  before_script:
    - echo $GCP_CREDENTIAL_FILE > /account.json
    - /google-cloud-sdk/bin/gcloud auth activate-service-account --key-file /account.json
    - export GOOGLE_APPLICATION_CREDENTIALS=/account.json

.deploy-dev: &deploy-dev
  <<: *deploy-gcp
  environment:
    name: dev
  only:
    refs:
      - master
      - tags
  except:
    refs:
      - schedules

.deploy-prod: &deploy-prod
  <<: *deploy-gcp
  environment:
    name: prod
  only:
    refs:
      - master
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /^v(\d+\.)(\d+\.)(\*|\d+)/
  except:
    refs:
      - schedules

.pack-docker: &pack-docker
  tags:
    - docker
  image: docker:19.03.1
  services:
    - docker:dind
  before_script:
    - echo $DOCKER_REGISTRY_PASSWORD > /password.txt
    - cat /password.txt | base64 -d | docker login -u $DOCKER_REGISTRY_USER --password-stdin https://index.docker.io/v1/
  retry: 1


# test
test.app:
  tags:
    - linux
    - docker
  stage: test
  image: willischou/python-flask:0.2
  script:
    - export FLASK_APP=$CI_PROJECT_DIR/autoapp.py
    - pip install -r requirements/dev.txt
    - flask test

lint.app:
  tags:
    - linux
    - docker
  allow_failure: true
  stage: test
  image: willischou/python-flask:0.2
  script:
    - export FLASK_APP=$CI_PROJECT_DIR/autoapp.py
    - pip install -r requirements/dev.txt
    - flask lint

# pack
pack.app:
  stage: pack
  <<: *pack-docker
  script:
    - .ci/docker_pack.sh . willischou/flask-realworld-example-app

# cluster
cluster.dev.apply:
  stage: cluster
  <<: *deploy-dev
  script:
    - .ci/kops_deploy.sh $CI_PROJECT_DIR/k8s kops $K8S_CLUSTER_NAEM

cluster.prod.apply:
  when: manual
  allow_failure: false
  stage: cluster.prod
  <<: *deploy-prod
  script:
    - .ci/kops_deploy.sh $CI_PROJECT_DIR/k8s kops $K8S_CLUSTER_NAEM

# deploy
deploy.dev.app:
  stage: deploy
  <<: *deploy-dev
  script:
    - kops export kubecfg $K8S_CLUSTER_NAEM
    - .ci/k8s_deploy.sh $CI_PROJECT_DIR/k8s app
    - kubectl get svc

deploy.dev.postgres:
  stage: deploy
  <<: *deploy-dev
  script:
    - kops export kubecfg $K8S_CLUSTER_NAEM
    - .ci/k8s_deploy.sh $CI_PROJECT_DIR/k8s postgres
    - kubectl get svc

deploy.dev.nginx-ingress:
  stage: deploy
  <<: *deploy-dev
  script:
    - kops export kubecfg $K8S_CLUSTER_NAEM
    - .ci/k8s_deploy.sh $CI_PROJECT_DIR/k8s nginx-ingress
    - kubectl get svc

deploy.prod.app:
  stage: deploy.prod
  <<: *deploy-prod
  script:
    - kops export kubecfg $K8S_CLUSTER_NAEM
    - .ci/k8s_deploy.sh $CI_PROJECT_DIR/k8s app
    - kubectl get svc

deploy.prod.postgres:
  stage: deploy.prod
  <<: *deploy-prod
  script:
    - kops export kubecfg $K8S_CLUSTER_NAEM
    - .ci/k8s_deploy.sh $CI_PROJECT_DIR/k8s postgres
    - kubectl get svc

deploy.prod.nginx-ingress:
  stage: deploy.prod
  <<: *deploy-prod
  script:
    - kops export kubecfg $K8S_CLUSTER_NAEM
    - .ci/k8s_deploy.sh $CI_PROJECT_DIR/k8s nginx-ingress
    - kubectl get svc
